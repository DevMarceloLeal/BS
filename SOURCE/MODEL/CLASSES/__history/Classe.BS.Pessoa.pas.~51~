unit Classe.BS.Pessoa;

interface

uses
  System.SysUtils,
  Vcl.Forms,
  Model.Conexao.Interfaces,
  Model.FireDAC.DataFunctions,
  Auxiliar.Datas,
  Auxiliar.Dialogos,
  Auxiliar.Informacoes,
  Auxiliar.Formatacoes,
  AUxiliar.Validacoes,
  Auxiliar.Comandos.SQL;

type
  TBS_Pessoa = class
  private
    FPES_ID: Integer;
    FPES_NOME: String;
    FPES_DATANASC: TDateTime;
    FPES_TIPOSANG: String;
    FPES_EMAIL: String;
    FPES_CELULAR: String;
    FPES_CPF: String;
    FDBFuncoes: iModelFuncoes;
    procedure SetPES_NOME(const Value: String);
    procedure SetPES_DATANASC(const Value: TDateTime);
    procedure SetPES_EMAIL(const Value: String);
    procedure SetPES_CELULAR(const Value: String);
    procedure SetPES_CPF(const Value: String);
  public
    constructor Create;
    destructor Destroy; override;
    class function New: TBS_Pessoa;
    class function SQL_Criar_Tabela: String;
    class function SQL_Selecionar_Registros(pCampo: String = ''; pTexto: String = ''): String;
    class function SQL_Seleciona_Registro(pTexto: String): String;
    class function SQL_Incrementa(pLiga: Boolean = True): String;
    class function SQL_Deletar_Registros(pTexto: String): String;

    property PES_ID:       Integer   read FPES_ID       write FPES_ID;
    property PES_NOME:     String    read FPES_NOME     write SetPES_NOME;
    property PES_DATANASC: TDateTime read FPES_DATANASC write SetPES_DATANASC;
    property PES_TIPOSANG: String    read FPES_TIPOSANG write FPES_TIPOSANG;
    property PES_EMAIL:    String read FPES_EMAIL write SetPES_EMAIL;
    property PES_CELULAR:  String read FPES_CELULAR write SetPES_CELULAR;
    property PES_CPF:      String read FPES_CPF write SetPES_CPF;
  end;

const
  FTabela: String = 'BS_PESSOA';
  FCampos: String = 'PES_ID INT NOT NULL IDENTITY, '+
                    'PES_NOME VARCHAR(100) NOT NULL, ' +
                    'PES_DATANASC DATETIME NOT NULL, ' +
                    'PES_TIPOSANG CHAR(02) NOT NULL, ' +
                    'PES_EMAIL VARCHAR(100) NOT NULL, ' +
                    'PES_CELULAR VARCHAR(100) NOT NULL, ' +
                    'PES_CPF VARCHAR(100) NOT NULL ' +
                    'CONSTRAINT pk_PES_ID PRIMARY KEY (PES_ID)';

implementation

uses
  System.Variants;

{ TBS_Pessoa }

constructor TBS_Pessoa.Create;
begin
  FDBFuncoes := TDataFunctions.New;
  try
    PES_ID       := FDBFuncoes.ID_Gerado('BS_PESSOA');
    PES_NOME     := '';
    PES_TIPOSANG := '';
    PES_EMAIL    := '';
    PES_CELULAR  := '';
    PES_CPF      := '';
  except on E: Exception do
  end;
end;

destructor TBS_Pessoa.Destroy;
begin
  inherited;
end;

class function TBS_Pessoa.New: TBS_Pessoa;
begin
  Result := Self.Create;
end;

procedure TBS_Pessoa.SetPES_NOME(const Value: String);
begin
  if (Value <> '') and (Value.Length < 5) then
     raise Exception.Create('O Nome do Doador Requer Mais de 5 Caracteres !!!')
  else
     FPES_NOME := Value;
end;

procedure TBS_Pessoa.SetPES_DATANASC(const Value: TDateTime);
var
  FIdade: Integer;

begin
  FIdade := Calcular_Idade(Value);
  if (Value <> 0) and ((FIdade < 18) or (FIdade > 60)) then
     raise Exception.Create('Esta Pessoa Não Tem Idade Para Doador !!!')
  else
     FPES_DATANASC := Value;
end;

procedure TBS_Pessoa.SetPES_EMAIL(const Value: String);
begin
  if (not VarIsNull(Value)) and (not IsEmailValido(Value)) then
     raise Exception.Create('E-Mail Inválido')
  else
     FPES_EMAIL := Value;
end;

procedure TBS_Pessoa.SetPES_CELULAR(const Value: String);
begin
  if Value <> '' then
     FPES_CELULAR := FormataTEL(Value)
  else
     FPES_CELULAR := Value;
end;

procedure TBS_Pessoa.SetPES_CPF(const Value: String);
begin
  if Value <> '' then
     FPES_CPF := FormataCPF(Value)
  else
     FPES_CPF := Value;
end;

class function TBS_Pessoa.SQL_Criar_Tabela: String;
begin
  Result := SQL_Criar_Tabela_Dados(FTabela, FCampos, 'MSSQL');
end;

class function TBS_Pessoa.SQL_Selecionar_Registros(pCampo: String = ''; pTexto: String = ''): String;
begin
  if pCampo = '' then
     Result := SQL_Selecao_Registros(FTabela, '*')
  else
     Result := SQL_Selecao_Registros(FTabela, '*', pTexto, pCampo);
end;

class function TBS_Pessoa.SQL_Seleciona_Registro(pTexto: String): String;
begin
  Result := SQL_Selecionar_Registro(FTabela, 'PES_ID', pTexto, True);
end;

class function TBS_Pessoa.SQL_Incrementa(pLiga: Boolean = True): String;
begin
  Result := SQL_Incrementar_ID(FTabela, pLiga);
end;

class function TBS_Pessoa.SQL_Deletar_Registros(pTexto: String): String;
begin
  Result := SQL_Excluir_Registros(FTabela, 'PES_ID', pTexto);
end;

end.
